sources1 <- read.csv("sources_spain.txt", header = TRUE, skip = 23)
sources2 <- read.csv("sources_portugal.txt", header = TRUE, skip = 23)

sources <- sources1
sources[(nrow(sources1) + 1):(nrow(sources1) + nrow(sources2)),] <- sources2
stations <- sources




# Cargar el conjunto de datos en un data frame (suponiendo que se llama "stations")


# Función para convertir grados, minutos y segundos a sistema decimal
convertir_a_decimal <- function(coordenada) {
  # Extraer el signo de la coordenada
  signo <- substr(coordenada, 1, 1)
  
  # Extraer los grados, minutos y segundos
  partes <- strsplit(coordenada, split = "[:]+")
  grados <- as.numeric(partes[[1]][1])
  minutos <- as.numeric(partes[[1]][2])
  segundos <- as.numeric(partes[[1]][3])
  
  # Calcular el valor en sistema decimal
  decimal <- grados + minutos/60 + segundos/3600
  
  # Multiplicar por -1 si el signo es "-"
  if (signo == "-") {
    decimal <- grados - minutos/60 - segundos/3600
  }  else{
    decimal <- grados + minutos/60 + segundos/3600
  }
   
  return(decimal)
}
stations$LON <- sapply(sources$LON,convertir_a_decimal)
stations$LAT <- sapply(sources$LAT,convertir_a_decimal)
c(1:length(sources$LON))[is.na(stations$LAT)]


sources <- sources[, c("STAID","BEGIN","END")]


database <- data.frame("STAID" = matrix(nrow = length(unique(sources$STAID))))
database$STAID <- sort(unique(sources$STAID))
database$BEGIN <- unlist(sapply(split(sources$BEGIN,  sources$STAID), min))  #creo que el unlist sobra
database$END   <- unlist(sapply(split(sources$END,  sources$STAID), max))
database <- database[database$STAID %in% stations$STAID[stations$LON > -10], ]
database <- database[database$STAID %in% stations$STAID[stations$LAT > 36], ]
rectangulo <- stations$STAID[stations$LON > 1 & stations$LON < 5 & stations$LAT > 38 & stations$LAT < 40]
database <- database[!(database$STAID %in% rectangulo), ]
min(database$BEGIN) #Es 1986
aux.initial.year <- 1960
aux.final.year <- 2022
aux.first.day <- 19600101
aux.final.day <- 20221231

database <- database[!((database$BEGIN > aux.first.day) | (database$END < aux.final.day)), ] #creo que seria sin igual
dim(database)
n <- nrow(database)


library(stringr)
ficheros <- paste0("TX_STAID", str_pad(database$STAID, 6, pad = "0"), ".txt")
es.NA     <- rep(NA, n)
es.impute <- rep(NA, n)
data <- list()

for (i in 1:n) {
  data[[i]] <- read.csv(ficheros[i], header = TRUE, skip = 19)
  data[[i]] <- data[[i]][str_sub(data[[i]]$DATE, end = -5) %in% as.character(aux.initial.year: aux.final.year), ]
  es.NA[i]     <- sum(data[[i]]$Q_TX == 9)
  es.impute[i] <- sum(data[[i]]$Q_TX == 1) # del 2 al 8 no hay nada?
}

cbind(stations$STANAME[stations$STAID %in% database$STAID], es.NA, es.impute)
criterio <- (es.NA + es.impute) < 100
database <- database[criterio,]
#preguntar parte de series repetidas, yo no veo

aux.N.stations <-  dim(database)[1]
aux.length.years <-  1+ aux.final.year- aux.initial.year
ficheros <- paste0("TX_STAID", str_pad(database$STAID, 6, pad = "0"), ".txt")


for(i.station in 1: aux.N.stations) {
  aux.file.name <- ficheros[i.station]
  aux.db <- read.csv(aux.file.name, header = TRUE, skip = 19)
  aux.db$TX[aux.db$Q_TX==9] <- NA
  aux.db$TX <- aux.db$TX/10 #Celsius degree
  aux.db$year <- as.numeric(str_sub(aux.db$DATE, end = -5))
  aux.db$month <- as.numeric(str_sub(aux.db$DATE, start=5, end = 6))
  aux.db$day.month <- as.numeric(str_sub(aux.db$DATE, start=7, end = 8))
  if(i.station==1) aux.selected.db <- aux.db[, c('year' , 'month', 'day.month' , 'TX', 'Q_TX'  )]
  if(i.station>1) {
    aux.selected.db <- merge( aux.selected.db, aux.db[, c('year' , 'month', 'day.month' , 'TX', 'Q_TX'  ) ] ,   by=c('year' , 'month', 'day.month' ), all.x=TRUE)
  } #end if

  aux.column.name <- paste( 'TX', database$STAID[i.station], sep='.' )
  names(aux.selected.db)[dim(aux.selected.db)[2]-1] <- aux.column.name
  aux.column.name <- paste( 'Q_TX', database$STAID[i.station], sep='.' )
  names(aux.selected.db)[dim(aux.selected.db)[2]] <- aux.column.name
} #end for i.station
 
Tmax_peninsula <- aux.selected.db
saveRDS( Tmax_peninsula, file = 'Tmax_peninsula.rds' )
duplicated(stations$STAID)


####
sx <- subset(stations,!duplicated(stations$STAID))
dx <- sx[sx$STAID%in%database$STAID,]
dx <- dx[,c('STAID','SOUNAME','CN','LAT','LON','HGHT')] 
####

Tmax_peninsula_geo <- dx
Tmax_peninsula <- readRDS('Tmax_peninsula.rds')
head( cbind( names(Tmax_peninsula)[1:54], Tmax_peninsula_geo) ) 
saveRDS( Tmax_peninsula_geo, file = 'Tmax_peninsula_geo.rds' )
#pintar mapas

par(mar=c(5,4,4,7)+0.1, xpd=TRUE)
dev.new(width=10, height=10)
par(mar=c(0,0,0,0)+0.1, xpd=TRUE)
library(maps)
map('world', xlim=c(-10,5), ylim=c(35.8,43.5), interior=F)
abline(h=c(35:45), v=c(-10:10), lty=3)
points(stations$LON, stations$LAT)
abline(v=-9.5)
sources1 <- read.csv("sources_spain.txt", header = TRUE, skip = 23)
sources2 <- read.csv("sources_portugal.txt", header = TRUE, skip = 23)

sources <- sources1
sources[(nrow(sources1) + 1):(nrow(sources1) + nrow(sources2)),] <- sources2

sources <- sources[, c("STAID","BEGIN","END")]

database <- data.frame("STAID" = matrix(nrow = length(unique(sources$STAID))))
database$STAID <- sort(unique(sources$STAID))
database$BEGIN <- unlist(sapply(split(sources$BEGIN,  sources$STAID), min))
database$END   <- unlist(sapply(split(sources$END,  sources$STAID), max))

# quitar islas del Atlantico
database <- database[database$STAID %in% stations$STAID[stations$LON > -10], ]
# quitar Ceuta y Melilla
database <- database[database$STAID %in% stations$STAID[stations$LAT > 36], ]
# quitar Baleares
rectangulo <- stations$STAID[stations$LON > 1 & stations$LON < 5 & stations$LAT > 38 & stations$LAT < 40]
database <- database[!(database$STAID %in% rectangulo), ]

# quitar series sin datos en periodo 1960 - 2019
#database <- database[!((database$BEGIN > 19600101) | (database$END < 20191231)), ]
# quitar series sin datos en periodo 1960 - 2021
database <- database[!((database$BEGIN > aux.first.day) | (database$END < aux.final.day )), ]

points(stations$LON[ stations$STAID %in% database$STAID], stations$LAT[stations$STAID %in% database$STAID], col=2, pch=16)




# quitar series con mas de 100 datos que sean imputados o NA
aux.n <-  dim(database)[1]
ficheros <- paste0("TX_STAID", str_pad(database$STAID, 6, pad = "0"), ".txt")
es.NA     <- rep(NA, aux.n)
es.impute <- rep(NA, aux.n)
data <- list()
#lectura de datos de tempeatura
for (i in 1: aux.n) {
  data[[i]] <- read.csv(ficheros[i], header = TRUE, skip = 19)
  data[[i]] <- data[[i]][str_sub(data[[i]]$DATE, end = -5) %in% as.character(aux.initial.year: aux.final.year), ]
  es.NA[i]     <- sum(data[[i]]$Q_TX == 9)
  es.impute[i] <- sum(data[[i]]$Q_TX == 1)
} #end for i
cbind(stations$STANAME[stations$STAID %in% database$STAID], es.NA, es.impute)
database$es.NA <- es.NA
database$inputed <- es.impute


#to save 53 stations with <100 data NA or inputed in 1960-2021
criterio <- ((es.NA + es.impute) < 100)
database <- database[criterio, ]

points(stations$LON[ stations$STAID %in% database$STAID], stations$LAT[stations$STAID %in% database$STAID], col=3, pch=16)




points(stations$LON[ stations$STAID %in% database$STAID], stations$LAT[stations$STAID %in% database$STAID], col=1, pch=16)
legend('bottomright' , legend=c('All', '1960-2022', '<100 na', 'Selected'), pch=c(1,16,16,16) , col=c(1,2,3,1))

dim(Tmax_peninsula[!(Tmax_peninsula$month==2 & Tmax_peninsula$day.month==29),])
Tmax_peninsula <- Tmax_peninsula[!(Tmax_peninsula$month==2 & Tmax_peninsula$day.month==29),]
#####

Tmax_peninsula_geo <- Tmax_peninsula_geo[order(Tmax_peninsula_geo$STAID),]

aux.marcador <- is.element(Tmax_peninsula_geo$STAID , database$STAID)
aux.rows <- 1:sum(aux.marcador) #por orden de aparición
aux.rows <-  order( Tmax_peninsula_geo[aux.marcador,c(6) ])    #order with altitude
aux.rows <-  order( Tmax_peninsula_geo[aux.marcador,c(4) ])    #order with latitde
merge(Tmax_peninsula_geo[aux.rows,],database[aux.rows,])
#aux.matrix <- cbind( as.matrix(Tmax_peninsula_geo[aux.marcador,]), database  )# #alternativa#
aux.matrix <- cbind( as.matrix( Tmax_peninsula_geo[aux.marcador,]), database  )

for(i.row in aux.rows) cat(unlist(aux.matrix[i.row ,c(1:3, 6) ]) , round(as.numeric(aux.matrix[ i.row ,c(4:5) ]), digits=2), aux.matrix$BEGIN[i.row], aux.matrix$END[i.row], aux.matrix$es.NA[i.row], aux.matrix$inputed[i.row], sep= '&' , fill=T)
################
